// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: distance.proto

package distance1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DistanceCalculatorService_GetDistance_FullMethodName = "/distance1.DistanceCalculatorService/GetDistance"
)

// DistanceCalculatorServiceClient is the client API for DistanceCalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistanceCalculatorServiceClient interface {
	GetDistance(ctx context.Context, in *DistanceRequest, opts ...grpc.CallOption) (*DistanceResponse, error)
}

type distanceCalculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistanceCalculatorServiceClient(cc grpc.ClientConnInterface) DistanceCalculatorServiceClient {
	return &distanceCalculatorServiceClient{cc}
}

func (c *distanceCalculatorServiceClient) GetDistance(ctx context.Context, in *DistanceRequest, opts ...grpc.CallOption) (*DistanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistanceResponse)
	err := c.cc.Invoke(ctx, DistanceCalculatorService_GetDistance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistanceCalculatorServiceServer is the server API for DistanceCalculatorService service.
// All implementations must embed UnimplementedDistanceCalculatorServiceServer
// for forward compatibility.
type DistanceCalculatorServiceServer interface {
	GetDistance(context.Context, *DistanceRequest) (*DistanceResponse, error)
	mustEmbedUnimplementedDistanceCalculatorServiceServer()
}

// UnimplementedDistanceCalculatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDistanceCalculatorServiceServer struct{}

func (UnimplementedDistanceCalculatorServiceServer) GetDistance(context.Context, *DistanceRequest) (*DistanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistance not implemented")
}
func (UnimplementedDistanceCalculatorServiceServer) mustEmbedUnimplementedDistanceCalculatorServiceServer() {
}
func (UnimplementedDistanceCalculatorServiceServer) testEmbeddedByValue() {}

// UnsafeDistanceCalculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistanceCalculatorServiceServer will
// result in compilation errors.
type UnsafeDistanceCalculatorServiceServer interface {
	mustEmbedUnimplementedDistanceCalculatorServiceServer()
}

func RegisterDistanceCalculatorServiceServer(s grpc.ServiceRegistrar, srv DistanceCalculatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedDistanceCalculatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DistanceCalculatorService_ServiceDesc, srv)
}

func _DistanceCalculatorService_GetDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistanceCalculatorServiceServer).GetDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistanceCalculatorService_GetDistance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistanceCalculatorServiceServer).GetDistance(ctx, req.(*DistanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistanceCalculatorService_ServiceDesc is the grpc.ServiceDesc for DistanceCalculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistanceCalculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distance1.DistanceCalculatorService",
	HandlerType: (*DistanceCalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDistance",
			Handler:    _DistanceCalculatorService_GetDistance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distance.proto",
}
